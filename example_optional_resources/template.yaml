resources:
  - id: deployment
    template:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ${metadata.name}
        # Conditionally add annotations - if enableServiceMonitor, add annotation, else empty map
        annotations: |
          ${spec.enableServiceMonitor ? {"prometheus.io/scrape": "true", "prometheus.io/path": spec.metricsPath} : {}}
      spec:
        replicas: ${spec.minReplicas}
        selector:
          matchLabels:
            app: ${metadata.name}
        template:
          metadata:
            labels:
              app: ${metadata.name}
          spec:
            containers:
              - name: app
                image: nginx:latest
                ports:
                  - containerPort: 8080
                # Conditionally add resources section - if condition true, add limits, else empty
                resources: |
                  ${spec.enableHPA ? {
                    "requests": {"cpu": "100m", "memory": "128Mi"},
                    "limits": {"cpu": "500m", "memory": "512Mi"}
                  } : {}}

  - id: service
    template:
      apiVersion: v1
      kind: Service
      metadata:
        name: ${metadata.name}-svc
      spec:
        selector:
          app: ${metadata.name}
        ports: |
          ${[{"port": 80, "targetPort": 8080, "name": "http"}] + (spec.enableServiceMonitor ? [{"port": 9090, "targetPort": 9090, "name": "metrics"}] : [])}

  # Conditionally include entire HPA resource
  - id: hpa
    condition: ${spec.enableHPA}
    template:
      apiVersion: autoscaling/v2
      kind: HorizontalPodAutoscaler
      metadata:
        name: ${metadata.name}-hpa
      spec:
        scaleTargetRef:
          apiVersion: apps/v1
          kind: Deployment
          name: ${metadata.name}
        minReplicas: ${spec.minReplicas}
        maxReplicas: ${spec.maxReplicas}
        metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: ${spec.targetCPU}

  # Conditionally include entire Ingress resource
  - id: ingress
    condition: ${spec.enableIngress}
    template:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: ${metadata.name}-ingress
      spec:
        rules:
          - host: ${spec.ingressHost}
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: ${metadata.name}-svc
                      port:
                        number: 80

  # ServiceMonitor - only if monitoring enabled
  - id: servicemonitor
    condition: ${spec.enableServiceMonitor}
    template:
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        name: ${metadata.name}-monitor
      spec:
        selector:
          matchLabels:
            app: ${metadata.name}
        endpoints:
          - port: metrics
            path: ${spec.metricsPath}